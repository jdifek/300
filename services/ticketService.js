const Ticket = require('../models/Ticket');
const User = require('../models/User');
const ApiError = require('../exceptions/api-error');

class TicketService {
  async getAllTickets() {
    try {
      const tickets = await Ticket.find().select('number questions');
      return tickets;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤: ${error.message}`);
    }
  }

  async getTicketByNumber(ticketNumber) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ticketNumber —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      if (isNaN(ticketNumber)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞');
      }

      const ticket = await Ticket.findOne({ number: ticketNumber }).populate('questions');
      if (!ticket) {
        throw ApiError.NotFound('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return ticket;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞: ${error.message}`);
    }
  }

  async getQuestionsByCategory(category) {
    try {
      const tickets = await Ticket.find().populate({
        path: 'questions',
        match: { category }
      });
      const questions = tickets.reduce((acc, ticket) => {
        return acc.concat(ticket.questions.filter(q => q.category === category));
      }, []);
      return questions;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
    }
  }

  async getRandomQuestions(count) {
    try {
      const tickets = await Ticket.find().populate('questions');
      const allQuestions = tickets.reduce((acc, ticket) => {
        return acc.concat(ticket.questions);
      }, []);
      const shuffled = allQuestions.sort(() => 0.5 - Math.random());
      return shuffled.slice(0, count);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${error.message}`);
    }
  }

  async startTicket(number, userId) {
    try {
      const ticket = await Ticket.findOne({ number }).populate('questions');
      if (!ticket) {
        throw ApiError.NotFound('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const user = await User.findById(userId);
      if (!user) {
        throw ApiError.NotFound('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –±–∏–ª–µ—Ç
      const ticketProgress = user.ticketsProgress.find(tp => tp.ticketNumber === number);
      if (!ticketProgress) {
        user.ticketsProgress.push({
          ticketNumber: number,
          isCompleted: false,
          mistakes: 0,
          correctAnswers: 0,
          totalQuestions: ticket.questions.length
        });
        await user.save();
      }

      return ticket;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –±–∏–ª–µ—Ç–∞: ${error.message}`);
    }
  }
  async submitTicket(number, userId, answers) {
    try {
      console.log('üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–∏–ª–µ—Ç–∞:', { number, userId, answers });
  
      const ticket = await Ticket.findOne({ number }).populate('questions');
      if (!ticket) {
        console.warn(`‚ö†Ô∏è –ë–∏–ª–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${number} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw ApiError.NotFound('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –±–∏–ª–µ—Ç:', ticket.number);
  
      const user = await User.findById(userId);
      if (!user) {
        console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw ApiError.NotFound('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email || user._id);
  
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      let correctAnswersDelta = 0;
      let mistakesDelta = 0;
      const detailedResults = [];
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã
      let ticketProgress = user.ticketsProgress.find(tp => tp.ticketNumber === number);
      if (!ticketProgress) {
        ticketProgress = {
          ticketNumber: number,
          isCompleted: false,
          mistakes: 0,
          correctAnswers: 0,
          totalQuestions: ticket.questions.length,
          answeredQuestions: [], // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
          completedAt: null
        };
        user.ticketsProgress.push(ticketProgress);
        console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –±–∏–ª–µ—Ç—É:', ticketProgress);
      }
  
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
      answers.forEach(answer => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω
        const alreadyAnswered = ticketProgress.answeredQuestions.find(
          q => q.questionId === answer.questionId
        ); // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ 225
        if (alreadyAnswered) {
          console.log(`‚ö†Ô∏è –í–æ–ø—Ä–æ—Å ${answer.questionId} —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω —Ä–∞–Ω–µ–µ`);
          return;
        }
  
        const question = ticket.questions.find(q => q._id.toString() === answer.questionId);
        if (!question) {
          console.warn(`‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID: ${answer.questionId}`);
          detailedResults.push({
            questionId: answer.questionId,
            selectedOption: answer.selectedOption,
            isCorrect: false
          });
          mistakesDelta++;
          ticketProgress.answeredQuestions.push({
            questionId: answer.questionId,
            selectedOption: answer.selectedOption,
            isCorrect: false
          });
          return;
        }
  
        const correctOption = question.options.find(opt => opt.isCorrect);
        const isCorrect = correctOption && answer.selectedOption === correctOption.text;
  
        if (isCorrect) {
          correctAnswersDelta++;
        } else {
          mistakesDelta++;
        }
  
        detailedResults.push({
          questionId: answer.questionId,
          selectedOption: answer.selectedOption,
          isCorrect
        });
  
        ticketProgress.answeredQuestions.push({
          questionId: answer.questionId,
          selectedOption: answer.selectedOption,
          isCorrect
        });
  
        console.log(`üìò –í–æ–ø—Ä–æ—Å ${question._id}: –æ—Ç–≤–µ—Ç "${answer.selectedOption}", –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: "${correctOption?.text}", —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${isCorrect}`);
      });
  
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      ticketProgress.correctAnswers += correctAnswersDelta;
      ticketProgress.mistakes += mistakesDelta;
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
      const totalAnswered = ticketProgress.answeredQuestions.length;
      if (totalAnswered >= ticket.questions.length) {
        ticketProgress.isCompleted = true;
        ticketProgress.completedAt = new Date();
      }
  
      console.log('üìä –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:', {
        correctAnswers: ticketProgress.correctAnswers,
        mistakes: ticketProgress.mistakes,
        totalAnswered
      });
  
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      user.stats.ticketsCompleted = user.ticketsProgress.filter(tp => tp.isCompleted).length;
      user.stats.mistakes = user.ticketsProgress.reduce((acc, tp) => acc + tp.mistakes, 0);
  
      await user.save();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:', {
        ticketsCompleted: user.stats.ticketsCompleted,
        totalMistakes: user.stats.mistakes
      });
  
      const successRate = (ticketProgress.correctAnswers / ticket.questions.length) * 100;
  
      const result = {
        ticketNumber: number,
        totalQuestions: ticket.questions.length,
        correctAnswers: ticketProgress.correctAnswers,
        mistakes: ticketProgress.mistakes,
        successRate,
        answers: detailedResults,
        totalAnswered
      };
  
      console.log('üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–ª–µ—Ç–∞:', result);
      return result;
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞:', error.message);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞: ${error.message}`);
    }
  }
  

  async getTicketProgress(userId) {
    try {
      const user = await User.findById(userId);
      if (!user) {
        throw ApiError.NotFound('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const allTickets = await Ticket.find().select('number');
      const totalTickets = allTickets.length;
      const ticketsCompleted = user.ticketsProgress.filter(tp => tp.isCompleted).length;
      const totalMistakes = user.stats.mistakes;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∏–ª–µ—Ç
      let nextTicket = 1;
      for (let i = 1; i <= totalTickets; i++) {
        const ticketProgress = user.ticketsProgress.find(tp => tp.ticketNumber === i);
        if (!ticketProgress || !ticketProgress.isCompleted) {
          nextTicket = i;
          break;
        }
      }

      return {
        totalTickets,
        ticketsCompleted,
        totalMistakes,
        ticketsProgress: user.ticketsProgress,
        nextTicket
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${error.message}`);
    }
  }
}

module.exports = new TicketService();